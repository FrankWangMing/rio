{"version":3,"file":"testHelpers.js","sourceRoot":"","sources":["../../src/utils/testHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport { createNode } from './createNode';\r\n\r\nimport { editorInitialState } from '../editor/store';\r\nimport { Nodes } from '../interfaces';\r\n\r\nconst getTestNode = (parentNode) => {\r\n  const {\r\n    events,\r\n    data: { nodes: childNodes, linkedNodes },\r\n    ...restParentNode\r\n  } = parentNode;\r\n  const validParentNode = createNode(cloneDeep(parentNode));\r\n  parentNode = {\r\n    ...validParentNode,\r\n    ...restParentNode,\r\n    events: {\r\n      ...validParentNode.events,\r\n      ...events,\r\n    },\r\n    dom: parentNode.dom || validParentNode.dom,\r\n  };\r\n\r\n  return {\r\n    node: parentNode,\r\n    childNodes,\r\n    linkedNodes,\r\n  };\r\n};\r\n\r\nexport const expectEditorState = (lhs, rhs) => {\r\n  const { nodes: nodesRhs, ...restRhs } = rhs;\r\n  const { nodes: nodesLhs, ...restLhs } = lhs;\r\n  expect(restLhs).toEqual(restRhs);\r\n\r\n  const nodesRhsSimplified = Object.keys(nodesRhs).reduce((accum, id) => {\r\n    const { _hydrationTimestamp, rules, ...node } = nodesRhs[id];\r\n    accum[id] = node;\r\n    return accum;\r\n  }, {});\r\n\r\n  const nodesLhsSimplified = Object.keys(nodesLhs).reduce((accum, id) => {\r\n    const { _hydrationTimestamp, rules, ...node } = nodesLhs[id];\r\n    accum[id] = node;\r\n    return accum;\r\n  }, {});\r\n\r\n  expect(nodesLhsSimplified).toEqual(nodesRhsSimplified);\r\n};\r\n\r\nexport const createTestNodes = (rootNode): Nodes => {\r\n  const nodes = {};\r\n  const iterateNodes = (testNode) => {\r\n    const { node: parentNode, childNodes, linkedNodes } = getTestNode(testNode);\r\n    nodes[parentNode.id] = parentNode;\r\n\r\n    if (childNodes) {\r\n      childNodes.forEach((childTestNode, i) => {\r\n        const {\r\n          node: childNode,\r\n          childNodes: grandChildNodes,\r\n          linkedNodes: grandChildLinkedNodes,\r\n        } = getTestNode(childTestNode);\r\n        childNode.data.parent = parentNode.id;\r\n        nodes[childNode.id] = childNode;\r\n        parentNode.data.nodes[i] = childNode.id;\r\n        iterateNodes({\r\n          ...childNode,\r\n          data: {\r\n            ...childNode.data,\r\n            nodes: grandChildNodes || [],\r\n            linkedNodes: grandChildLinkedNodes || {},\r\n          },\r\n        });\r\n      });\r\n    }\r\n\r\n    if (linkedNodes) {\r\n      Object.keys(linkedNodes).forEach((linkedId) => {\r\n        const {\r\n          node: childNode,\r\n          childNodes: grandChildNodes,\r\n          linkedNodes: grandChildLinkedNodes,\r\n        } = getTestNode(linkedNodes[linkedId]);\r\n        parentNode.data.linkedNodes[linkedId] = childNode.id;\r\n\r\n        childNode.data.parent = parentNode.id;\r\n        nodes[childNode.id] = childNode;\r\n        iterateNodes({\r\n          ...childNode,\r\n          data: {\r\n            ...childNode.data,\r\n            nodes: grandChildNodes || [],\r\n            linkedNodes: grandChildLinkedNodes || {},\r\n          },\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  iterateNodes(rootNode);\r\n\r\n  return nodes;\r\n};\r\n\r\nexport const createTestState = (state = {} as any) => {\r\n  const { nodes: rootNode, events } = state;\r\n\r\n  return {\r\n    ...editorInitialState,\r\n    ...state,\r\n    nodes: rootNode ? createTestNodes(rootNode) : {},\r\n    events: {\r\n      ...editorInitialState.events,\r\n      ...(events || {}),\r\n    },\r\n  };\r\n};\r\n"]}