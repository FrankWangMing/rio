{"version":3,"file":"store.js","sourceRoot":"","sources":["../../src/editor/store.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  useMethods,\r\n  SubscriberAndCallbacksFor,\r\n  PatchListener,\r\n} from '@rioe/utils';\r\n\r\nimport { ActionMethods } from './actions';\r\nimport { QueryMethods } from './query';\r\n\r\nimport { DefaultEventHandlers } from '../events';\r\nimport { EditorState, Options, NodeEventTypes, NodeId } from '../interfaces';\r\n\r\nexport const editorInitialState: EditorState = {\r\n  nodes: {},\r\n  events: {\r\n    dragged: new Set<NodeId>(),\r\n    selected: new Set<NodeId>(),\r\n    hovered: new Set<NodeId>(),\r\n  },\r\n  indicator: null,\r\n  options: {\r\n    onNodesChange: () => null,\r\n    onRender: ({ render }) => render,\r\n    onBeforeMoveEnd: () => null,\r\n    resolver: {},\r\n    enabled: true,\r\n    indicator: {\r\n      error: 'red',\r\n      success: 'rgb(98, 196, 98)',\r\n    },\r\n    handlers: (store) =>\r\n      new DefaultEventHandlers({\r\n        store,\r\n        removeHoverOnMouseleave: false,\r\n        isMultiSelectEnabled: (e: MouseEvent) => !!e.metaKey,\r\n      }),\r\n    normalizeNodes: () => {},\r\n  },\r\n};\r\n\r\nexport const ActionMethodsWithConfig = {\r\n  methods: ActionMethods,\r\n  ignoreHistoryForActions: [\r\n    'setDOM',\r\n    'setNodeEvent',\r\n    'selectNode',\r\n    'clearEvents',\r\n    'setOptions',\r\n    'setIndicator',\r\n  ] as const,\r\n  normalizeHistory: (state: EditorState) => {\r\n    /**\r\n     * On every undo/redo, we remove events pointing to deleted Nodes\r\n     */\r\n    Object.keys(state.events).forEach((eventName: NodeEventTypes) => {\r\n      const nodeIds = Array.from(state.events[eventName] || []);\r\n\r\n      nodeIds.forEach((id) => {\r\n        if (!state.nodes[id]) {\r\n          state.events[eventName].delete(id);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Remove any invalid node[nodeId].events\r\n    // TODO(prev): it's really cumbersome to have to ensure state.events and state.nodes[nodeId].events are in sync\r\n    // Find a way to make it so that once state.events is set, state.nodes[nodeId] automatically reflects that (maybe using proxies?)\r\n    Object.keys(state.nodes).forEach((id) => {\r\n      const node = state.nodes[id];\r\n\r\n      Object.keys(node.events).forEach((eventName: NodeEventTypes) => {\r\n        const isEventActive = !!node.events[eventName];\r\n\r\n        if (\r\n          isEventActive &&\r\n          state.events[eventName] &&\r\n          !state.events[eventName].has(node.id)\r\n        ) {\r\n          node.events[eventName] = false;\r\n        }\r\n      });\r\n    });\r\n  },\r\n};\r\n\r\nexport type EditorStore = SubscriberAndCallbacksFor<\r\n  typeof ActionMethodsWithConfig,\r\n  typeof QueryMethods\r\n>;\r\n\r\nexport const useEditorStore = (\r\n  options: Partial<Options>,\r\n  patchListener: PatchListener<\r\n    EditorState,\r\n    typeof ActionMethodsWithConfig,\r\n    typeof QueryMethods\r\n  >\r\n): EditorStore => {\r\n  // TODO: fix type\r\n  return useMethods(\r\n    ActionMethodsWithConfig,\r\n    {\r\n      ...editorInitialState,\r\n      options: {\r\n        ...editorInitialState.options,\r\n        ...options,\r\n      },\r\n    },\r\n    QueryMethods,\r\n    patchListener\r\n  ) as EditorStore;\r\n};\r\n"]}