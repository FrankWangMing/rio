{"version":3,"file":"findPosition.js","sourceRoot":"","sources":["../../src/events/findPosition.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,MAAY,EACZ,IAAgB,EAChB,IAAY,EACZ,IAAY;IAEZ,IAAI,MAAM,GAAiB;QACzB,MAAM;QACN,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,QAAQ;KAChB,CAAC;IAEF,IAAI,SAAS,GAAG,CAAC,EACf,MAAM,GAAG,CAAC,EACV,QAAQ,GAAG,CAAC,EACZ,MAAM,GAAG,CAAC,EACV,OAAO,GAAG,CAAC,EACX,OAAO,GAAG,CAAC,EACX,OAAO,GAAG,CAAC,CAAC;IAEd,wCAAwC;IACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAChD,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpB,8CAA8C;QAC9C,QAAQ,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC;QACrC,+CAA+C;QAC/C,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC;QACpC,uDAAuD;QACvD,OAAO,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACxC,uDAAuD;QACvD,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC;QACxC,0BAA0B;QAC1B,IACE,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC;YAC7B,CAAC,MAAM,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,iCAAiC;YAClE,CAAC,SAAS,IAAI,QAAQ,GAAG,SAAS,CAAC;YAEnC,SAAS;QAEX,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;QACjB,6CAA6C;QAC7C,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,IAAI,GAAG,OAAO;gBAAE,MAAM,GAAG,OAAO,CAAC;YACrC,yBAAyB;YACzB,IAAI,IAAI,GAAG,OAAO,EAAE,CAAC;gBACnB,MAAM,GAAG,OAAO,CAAC;gBACjB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,SAAS,GAAG,OAAO,CAAC;gBACpB,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;YACzB,CAAC;QACH,CAAC;aAAM,CAAC;YACN,yBAAyB;YACzB,IAAI,IAAI,GAAG,OAAO,EAAE,CAAC;gBACnB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;gBACxB,MAAM;YACR,CAAC;;gBAAM,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,qBAAqB;QACtD,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { Node, NodeInfo, DropPosition } from '../interfaces';\r\n\r\nexport default function findPosition(\r\n  parent: Node,\r\n  dims: NodeInfo[],\r\n  posX: number,\r\n  posY: number\r\n) {\r\n  let result: DropPosition = {\r\n    parent,\r\n    index: 0,\r\n    where: 'before',\r\n  };\r\n\r\n  let leftLimit = 0,\r\n    xLimit = 0,\r\n    dimRight = 0,\r\n    yLimit = 0,\r\n    xCenter = 0,\r\n    yCenter = 0,\r\n    dimDown = 0;\r\n\r\n  // Each dim is: Top, Left, Height, Width\r\n  for (let i = 0, len = dims.length; i < len; i++) {\r\n    const dim = dims[i];\r\n\r\n    // Right position of the element. Left + Width\r\n    dimRight = dim.left + dim.outerWidth;\r\n    // Bottom position of the element. Top + Height\r\n    dimDown = dim.top + dim.outerHeight;\r\n    // X center position of the element. Left + (Width / 2)\r\n    xCenter = dim.left + dim.outerWidth / 2;\r\n    // Y center position of the element. Top + (Height / 2)\r\n    yCenter = dim.top + dim.outerHeight / 2;\r\n    // Skip if over the limits\r\n    if (\r\n      (xLimit && dim.left > xLimit) ||\r\n      (yLimit && yCenter >= yLimit) || // >= avoid issue with clearfixes\r\n      (leftLimit && dimRight < leftLimit)\r\n    )\r\n      continue;\r\n\r\n    result.index = i;\r\n    // If it's not in flow (like 'float' element)\r\n    if (!dim.inFlow) {\r\n      if (posY < dimDown) yLimit = dimDown;\r\n      //If x lefter than center\r\n      if (posX < xCenter) {\r\n        xLimit = xCenter;\r\n        result.where = 'before';\r\n      } else {\r\n        leftLimit = xCenter;\r\n        result.where = 'after';\r\n      }\r\n    } else {\r\n      // If y upper than center\r\n      if (posY < yCenter) {\r\n        result.where = 'before';\r\n        break;\r\n      } else result.where = 'after'; // After last element\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n"]}