{"version":3,"file":"createNode.js","sourceRoot":"","sources":["../../src/utils/createNode.ts"],"names":[],"mappings":"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","sourcesContent":["import { getRandomId as getRandomNodeId } from '@rio/utils';\r\nimport React from 'react';\r\n\r\nimport { Node, FreshNode, UserComponentConfig } from '../interfaces';\r\nimport {\r\n  defaultElementProps,\r\n  Element,\r\n  Canvas,\r\n  elementPropToNodeData,\r\n  deprecateCanvasComponent,\r\n} from '../nodes';\r\nimport { NodeProvider } from '../nodes/NodeContext';\r\n\r\nconst getNodeTypeName = (type: string | { name: string }) =>\r\n  typeof type == 'string' ? type : type.name;\r\n\r\nexport function createNode(\r\n  newNode: FreshNode,\r\n  normalize?: (node: Node) => void\r\n) {\r\n  let actualType = newNode.data.type as any;\r\n  let id = newNode.id || getRandomNodeId();\r\n\r\n  const node: Node = {\r\n    id,\r\n    _hydrationTimestamp: Date.now(),\r\n    data: {\r\n      type: actualType,\r\n      name: getNodeTypeName(actualType),\r\n      displayName: getNodeTypeName(actualType),\r\n      props: {},\r\n      custom: {},\r\n      parent: null,\r\n      isCanvas: false,\r\n      hidden: false,\r\n      nodes: [],\r\n      linkedNodes: {},\r\n      ...newNode.data,\r\n    },\r\n    info: {},\r\n    related: {},\r\n    events: {\r\n      selected: false,\r\n      dragged: false,\r\n      hovered: false,\r\n    },\r\n    rules: {\r\n      canDrag: () => true,\r\n      canDrop: () => true,\r\n      canMoveIn: () => true,\r\n      canMoveOut: () => true,\r\n    },\r\n    dom: null,\r\n  };\r\n\r\n  // @ts-ignore\r\n  if (node.data.type === Element || node.data.type === Canvas) {\r\n    const mergedProps = {\r\n      ...defaultElementProps,\r\n      ...node.data.props,\r\n    };\r\n\r\n    node.data.props = Object.keys(node.data.props).reduce((props, key) => {\r\n      if (Object.keys(defaultElementProps).includes(key)) {\r\n        // If a <Element /> specific props is found (ie: \"is\", \"canvas\")\r\n        // Replace the node.data with the value specified in the prop\r\n        node.data[elementPropToNodeData[key] || key] = mergedProps[key];\r\n      } else {\r\n        // Otherwise include the props in the node as usual\r\n        props[key] = node.data.props[key];\r\n      }\r\n\r\n      return props;\r\n    }, {});\r\n\r\n    actualType = node.data.type;\r\n    node.data.name = getNodeTypeName(actualType);\r\n    node.data.displayName = getNodeTypeName(actualType);\r\n\r\n    const usingDeprecatedCanvas = node.data.type === Canvas;\r\n    if (usingDeprecatedCanvas) {\r\n      node.data.isCanvas = true;\r\n      deprecateCanvasComponent();\r\n    }\r\n  }\r\n\r\n  if (normalize) {\r\n    normalize(node);\r\n  }\r\n\r\n  // TODO: use UserComponentConfig type\r\n  const userComponentConfig = actualType.craft as UserComponentConfig<any>;\r\n\r\n  if (userComponentConfig) {\r\n    node.data.displayName =\r\n      userComponentConfig.displayName ||\r\n      userComponentConfig.name ||\r\n      node.data.displayName;\r\n\r\n    node.data.props = {\r\n      ...(userComponentConfig.props || userComponentConfig.defaultProps || {}),\r\n      ...node.data.props,\r\n    };\r\n\r\n    node.data.custom = {\r\n      ...(userComponentConfig.custom || {}),\r\n      ...node.data.custom,\r\n    };\r\n\r\n    if (\r\n      userComponentConfig.isCanvas !== undefined &&\r\n      userComponentConfig.isCanvas !== null\r\n    ) {\r\n      node.data.isCanvas = userComponentConfig.isCanvas;\r\n    }\r\n\r\n    if (userComponentConfig.rules) {\r\n      Object.keys(userComponentConfig.rules).forEach((key) => {\r\n        if (['canDrag', 'canDrop', 'canMoveIn', 'canMoveOut'].includes(key)) {\r\n          node.rules[key] = userComponentConfig.rules[key];\r\n        }\r\n      });\r\n    }\r\n\r\n    if (userComponentConfig.related) {\r\n      const relatedNodeContext = {\r\n        id: node.id,\r\n        related: true,\r\n      };\r\n\r\n      Object.keys(userComponentConfig.related).forEach((comp) => {\r\n        node.related[comp] = (props) =>\r\n          React.createElement(\r\n            NodeProvider,\r\n            relatedNodeContext,\r\n            React.createElement(userComponentConfig.related[comp], props)\r\n          );\r\n      });\r\n    }\r\n\r\n    if (userComponentConfig.info) {\r\n      node.info = userComponentConfig.info;\r\n    }\r\n  }\r\n\r\n  return node;\r\n}\r\n"]}