{"version":3,"file":"mergeTrees.js","sourceRoot":"","sources":["../../src/utils/mergeTrees.tsx"],"names":[],"mappings":"AAEA,MAAM,UAAU,GAAG,CAAC,QAAc,EAAE,aAAyB,EAAE,EAAE;IAC/D,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7B,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC;IACrC,CAAC;IACD,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC;IAChE,MAAM,gBAAgB,GAAG,EAAE,GAAG,QAAQ,EAAE,IAAI,EAAE,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;IAC5E,MAAM,SAAS,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,gBAAgB,EAAE,CAAC;IACtD,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,OAAO;YACL,GAAG,KAAK;YACR,GAAG,IAAI,CAAC,KAAK;YACb,yCAAyC;YACzC,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE;gBAChB,GAAG,WAAW;gBACd,IAAI,EAAE;oBACJ,GAAG,WAAW,CAAC,IAAI;oBACnB,MAAM,EAAE,QAAQ,CAAC,EAAE;iBACpB;aACF;SACF,CAAC;IACJ,CAAC,EAAE,SAAS,CAAC,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,QAAc,EACd,aAAyB,EACf,EAAE,CAAC,CAAC;IACd,UAAU,EAAE,QAAQ,CAAC,EAAE;IACvB,KAAK,EAAE,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC;CAC3C,CAAC,CAAC","sourcesContent":["import { Node, NodeTree } from '../interfaces';\r\n\r\nconst mergeNodes = (rootNode: Node, childrenNodes: NodeTree[]) => {\r\n  if (childrenNodes.length < 1) {\r\n    return { [rootNode.id]: rootNode };\r\n  }\r\n  const nodes = childrenNodes.map(({ rootNodeId }) => rootNodeId);\r\n  const nodeWithChildren = { ...rootNode, data: { ...rootNode.data, nodes } };\r\n  const rootNodes = { [rootNode.id]: nodeWithChildren };\r\n  return childrenNodes.reduce((accum, tree) => {\r\n    const currentNode = tree.nodes[tree.rootNodeId];\r\n    return {\r\n      ...accum,\r\n      ...tree.nodes,\r\n      // set the parent id for the current node\r\n      [currentNode.id]: {\r\n        ...currentNode,\r\n        data: {\r\n          ...currentNode.data,\r\n          parent: rootNode.id,\r\n        },\r\n      },\r\n    };\r\n  }, rootNodes);\r\n};\r\n\r\nexport const mergeTrees = (\r\n  rootNode: Node,\r\n  childrenNodes: NodeTree[]\r\n): NodeTree => ({\r\n  rootNodeId: rootNode.id,\r\n  nodes: mergeNodes(rootNode, childrenNodes),\r\n});\r\n"]}