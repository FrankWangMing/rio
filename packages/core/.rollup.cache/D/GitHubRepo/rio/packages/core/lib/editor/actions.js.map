{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../src/editor/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  deprecationWarning,\r\n  ERROR_INVALID_NODEID,\r\n  ROOT_NODE,\r\n  DEPRECATED_ROOT_NODE,\r\n  QueryCallbacksFor,\r\n  ERROR_NOPARENT,\r\n  ERROR_DELETE_TOP_LEVEL_NODE,\r\n  CallbacksFor,\r\n  Delete,\r\n  ERROR_NOT_IN_RESOLVER,\r\n} from '@rioe/utils';\r\nimport invariant from 'tiny-invariant';\r\n\r\nimport { QueryMethods } from './query';\r\n\r\nimport {\r\n  EditorState,\r\n  Indicator,\r\n  NodeId,\r\n  Node,\r\n  Nodes,\r\n  Options,\r\n  NodeEventTypes,\r\n  NodeTree,\r\n  SerializedNodes,\r\n  NodeSelector,\r\n  NodeSelectorType,\r\n} from '../interfaces';\r\nimport { fromEntries } from '../utils/fromEntries';\r\nimport { getNodesFromSelector } from '../utils/getNodesFromSelector';\r\nimport { removeNodeFromEvents } from '../utils/removeNodeFromEvents';\r\n\r\nconst Methods = (\r\n  state: EditorState,\r\n  query: QueryCallbacksFor<typeof QueryMethods>\r\n) => {\r\n  /** Helper functions */\r\n  const addNodeTreeToParent = (\r\n    tree: NodeTree,\r\n    parentId?: NodeId,\r\n    addNodeType?:\r\n      | {\r\n          type: 'child';\r\n          index: number;\r\n        }\r\n      | {\r\n          type: 'linked';\r\n          id: string;\r\n        }\r\n  ) => {\r\n    const iterateChildren = (id: NodeId, parentId?: NodeId) => {\r\n      const node = tree.nodes[id];\r\n\r\n      if (typeof node.data.type !== 'string') {\r\n        invariant(\r\n          state.options.resolver[node.data.name],\r\n          ERROR_NOT_IN_RESOLVER.replace(\r\n            '%node_type%',\r\n            `${(node.data.type as any).name}`\r\n          )\r\n        );\r\n      }\r\n\r\n      state.nodes[id] = {\r\n        ...node,\r\n        data: {\r\n          ...node.data,\r\n          parent: parentId,\r\n        },\r\n      };\r\n\r\n      if (node.data.nodes.length > 0) {\r\n        delete state.nodes[id].data.props.children;\r\n        node.data.nodes.forEach((childNodeId) =>\r\n          iterateChildren(childNodeId, node.id)\r\n        );\r\n      }\r\n\r\n      Object.values(node.data.linkedNodes).forEach((linkedNodeId) =>\r\n        iterateChildren(linkedNodeId, node.id)\r\n      );\r\n    };\r\n\r\n    iterateChildren(tree.rootNodeId, parentId);\r\n\r\n    if (!parentId && tree.rootNodeId === ROOT_NODE) {\r\n      return;\r\n    }\r\n\r\n    const parent = getParentAndValidate(parentId);\r\n\r\n    if (addNodeType.type === 'child') {\r\n      const index = addNodeType.index;\r\n\r\n      if (index != null) {\r\n        parent.data.nodes.splice(index, 0, tree.rootNodeId);\r\n      } else {\r\n        parent.data.nodes.push(tree.rootNodeId);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    parent.data.linkedNodes[addNodeType.id] = tree.rootNodeId;\r\n  };\r\n\r\n  const getParentAndValidate = (parentId: NodeId): Node => {\r\n    invariant(parentId, ERROR_NOPARENT);\r\n    const parent = state.nodes[parentId];\r\n    invariant(parent, ERROR_INVALID_NODEID);\r\n    return parent;\r\n  };\r\n\r\n  const deleteNode = (id: NodeId) => {\r\n    const targetNode = state.nodes[id],\r\n      parentNode = state.nodes[targetNode.data.parent];\r\n\r\n    if (targetNode.data.nodes) {\r\n      // we deep clone here because otherwise immer will mutate the node\r\n      // object as we remove nodes\r\n      [...targetNode.data.nodes].forEach((childId) => deleteNode(childId));\r\n    }\r\n\r\n    if (targetNode.data.linkedNodes) {\r\n      Object.values(targetNode.data.linkedNodes).map((linkedNodeId) =>\r\n        deleteNode(linkedNodeId)\r\n      );\r\n    }\r\n\r\n    const isChildNode = parentNode.data.nodes.includes(id);\r\n\r\n    if (isChildNode) {\r\n      const parentChildren = parentNode.data.nodes;\r\n      parentChildren.splice(parentChildren.indexOf(id), 1);\r\n    } else {\r\n      const linkedId = Object.keys(parentNode.data.linkedNodes).find(\r\n        (id) => parentNode.data.linkedNodes[id] === id\r\n      );\r\n      if (linkedId) {\r\n        delete parentNode.data.linkedNodes[linkedId];\r\n      }\r\n    }\r\n\r\n    removeNodeFromEvents(state, id);\r\n    delete state.nodes[id];\r\n  };\r\n\r\n  return {\r\n    /**\r\n     * @private\r\n     * Add a new linked Node to the editor.\r\n     * Only used internally by the <Element /> component\r\n     *\r\n     * @param tree\r\n     * @param parentId\r\n     * @param id\r\n     */\r\n    addLinkedNodeFromTree(tree: NodeTree, parentId: NodeId, id: string) {\r\n      const parent = getParentAndValidate(parentId);\r\n\r\n      const existingLinkedNode = parent.data.linkedNodes[id];\r\n\r\n      if (existingLinkedNode) {\r\n        deleteNode(existingLinkedNode);\r\n      }\r\n\r\n      addNodeTreeToParent(tree, parentId, { type: 'linked', id });\r\n    },\r\n\r\n    /**\r\n     * Add a new Node to the editor.\r\n     *\r\n     * @param nodeToAdd\r\n     * @param parentId\r\n     * @param index\r\n     */\r\n    add(nodeToAdd: Node | Node[], parentId?: NodeId, index?: number) {\r\n      // TODO: Deprecate adding array of Nodes to keep implementation simpler\r\n      let nodes = [nodeToAdd];\r\n      if (Array.isArray(nodeToAdd)) {\r\n        deprecationWarning('actions.add(node: Node[])', {\r\n          suggest: 'actions.add(node: Node)',\r\n        });\r\n        nodes = nodeToAdd;\r\n      }\r\n      nodes.forEach((node: Node) => {\r\n        addNodeTreeToParent(\r\n          {\r\n            nodes: {\r\n              [node.id]: node,\r\n            },\r\n            rootNodeId: node.id,\r\n          },\r\n          parentId,\r\n          { type: 'child', index }\r\n        );\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Add a NodeTree to the editor\r\n     *\r\n     * @param tree\r\n     * @param parentId\r\n     * @param index\r\n     */\r\n    addNodeTree(tree: NodeTree, parentId?: NodeId, index?: number) {\r\n      addNodeTreeToParent(tree, parentId, { type: 'child', index });\r\n    },\r\n\r\n    /**\r\n     * Delete a Node\r\n     * @param id\r\n     */\r\n    delete(selector: NodeSelector<NodeSelectorType.Id>) {\r\n      const targets = getNodesFromSelector(state.nodes, selector, {\r\n        existOnly: true,\r\n        idOnly: true,\r\n      });\r\n\r\n      targets.forEach(({ node }) => {\r\n        invariant(\r\n          !query.node(node.id).isTopLevelNode(),\r\n          ERROR_DELETE_TOP_LEVEL_NODE\r\n        );\r\n        deleteNode(node.id);\r\n      });\r\n    },\r\n\r\n    deserialize(input: SerializedNodes | string) {\r\n      const dehydratedNodes =\r\n        typeof input == 'string' ? JSON.parse(input) : input;\r\n\r\n      const nodePairs = Object.keys(dehydratedNodes).map((id) => {\r\n        let nodeId = id;\r\n\r\n        if (id === DEPRECATED_ROOT_NODE) {\r\n          nodeId = ROOT_NODE;\r\n        }\r\n\r\n        return [\r\n          nodeId,\r\n          query\r\n            .parseSerializedNode(dehydratedNodes[id])\r\n            .toNode((node) => (node.id = nodeId)),\r\n        ];\r\n      });\r\n\r\n      this.replaceNodes(fromEntries(nodePairs));\r\n    },\r\n\r\n    /**\r\n     * Move a target Node to a new Parent at a given index\r\n     * @param targetId\r\n     * @param newParentId\r\n     * @param index\r\n     */\r\n    move(selector: NodeSelector, newParentId: NodeId, index: number) {\r\n      const targets = getNodesFromSelector(state.nodes, selector, {\r\n        existOnly: true,\r\n      });\r\n\r\n      const newParent = state.nodes[newParentId];\r\n\r\n      const nodesArrToCleanup = new Set<string[]>();\r\n\r\n      targets.forEach(({ node: targetNode }, i) => {\r\n        const targetId = targetNode.id;\r\n        const currentParentId = targetNode.data.parent;\r\n\r\n        query.node(newParentId).isDroppable([targetId], (err) => {\r\n          throw new Error(err);\r\n        });\r\n\r\n        // modify node props\r\n        state.options.onBeforeMoveEnd(\r\n          targetNode,\r\n          newParent,\r\n          state.nodes[currentParentId]\r\n        );\r\n\r\n        const currentParent = state.nodes[currentParentId];\r\n        const currentParentNodes = currentParent.data.nodes;\r\n\r\n        nodesArrToCleanup.add(currentParentNodes);\r\n\r\n        const oldIndex = currentParentNodes.indexOf(targetId);\r\n        currentParentNodes[oldIndex] = '$$'; // mark for deletion\r\n\r\n        newParent.data.nodes.splice(index + i, 0, targetId);\r\n\r\n        state.nodes[targetId].data.parent = newParentId;\r\n      });\r\n\r\n      nodesArrToCleanup.forEach((nodes) => {\r\n        const length = nodes.length;\r\n\r\n        [...nodes].reverse().forEach((value, index) => {\r\n          if (value !== '$$') {\r\n            return;\r\n          }\r\n\r\n          nodes.splice(length - 1 - index, 1);\r\n        });\r\n      });\r\n    },\r\n\r\n    replaceNodes(nodes: Nodes) {\r\n      this.clearEvents();\r\n      state.nodes = nodes;\r\n    },\r\n\r\n    clearEvents() {\r\n      this.setNodeEvent('selected', null);\r\n      this.setNodeEvent('hovered', null);\r\n      this.setNodeEvent('dragged', null);\r\n      this.setIndicator(null);\r\n    },\r\n\r\n    /**\r\n     * Resets all the editor state.\r\n     */\r\n    reset() {\r\n      this.clearEvents();\r\n      this.replaceNodes({});\r\n    },\r\n\r\n    /**\r\n     * Set editor options via a callback function\r\n     *\r\n     * @param cb: function used to set the options.\r\n     */\r\n    setOptions(cb: (options: Partial<Options>) => void) {\r\n      cb(state.options);\r\n    },\r\n\r\n    setNodeEvent(\r\n      eventType: NodeEventTypes,\r\n      nodeIdSelector: NodeSelector<NodeSelectorType.Id>\r\n    ) {\r\n      state.events[eventType].forEach((id) => {\r\n        if (state.nodes[id]) {\r\n          state.nodes[id].events[eventType] = false;\r\n        }\r\n      });\r\n\r\n      state.events[eventType] = new Set();\r\n\r\n      if (!nodeIdSelector) {\r\n        return;\r\n      }\r\n\r\n      const targets = getNodesFromSelector(state.nodes, nodeIdSelector, {\r\n        idOnly: true,\r\n        existOnly: true,\r\n      });\r\n\r\n      const nodeIds: Set<NodeId> = new Set(targets.map(({ node }) => node.id));\r\n      nodeIds.forEach((id) => {\r\n        state.nodes[id].events[eventType] = true;\r\n      });\r\n      state.events[eventType] = nodeIds;\r\n    },\r\n\r\n    /**\r\n     * Set custom values to a Node\r\n     * @param id\r\n     * @param cb\r\n     */\r\n    setCustom<T extends NodeId>(\r\n      selector: NodeSelector<NodeSelectorType.Id>,\r\n      cb: (data: EditorState['nodes'][T]['data']['custom']) => void\r\n    ) {\r\n      const targets = getNodesFromSelector(state.nodes, selector, {\r\n        idOnly: true,\r\n        existOnly: true,\r\n      });\r\n\r\n      targets.forEach(({ node }) => cb(state.nodes[node.id].data.custom));\r\n    },\r\n\r\n    /**\r\n     * Given a `id`, it will set the `dom` porperty of that node.\r\n     *\r\n     * @param id of the node we want to set\r\n     * @param dom\r\n     */\r\n    setDOM(id: NodeId, dom: HTMLElement) {\r\n      if (!state.nodes[id]) {\r\n        return;\r\n      }\r\n\r\n      state.nodes[id].dom = dom;\r\n    },\r\n\r\n    setIndicator(indicator: Indicator | null) {\r\n      if (\r\n        indicator &&\r\n        (!indicator.placement.parent.dom ||\r\n          (indicator.placement.currentNode &&\r\n            !indicator.placement.currentNode.dom))\r\n      )\r\n        return;\r\n      state.indicator = indicator;\r\n    },\r\n\r\n    /**\r\n     * Hide a Node\r\n     * @param id\r\n     * @param bool\r\n     */\r\n    setHidden(id: NodeId, bool: boolean) {\r\n      state.nodes[id].data.hidden = bool;\r\n    },\r\n\r\n    /**\r\n     * Update the props of a Node\r\n     * @param id\r\n     * @param cb\r\n     */\r\n    setProp(\r\n      selector: NodeSelector<NodeSelectorType.Id>,\r\n      cb: (props: any) => void\r\n    ) {\r\n      const targets = getNodesFromSelector(state.nodes, selector, {\r\n        idOnly: true,\r\n        existOnly: true,\r\n      });\r\n\r\n      targets.forEach(({ node }) => cb(state.nodes[node.id].data.props));\r\n    },\r\n\r\n    selectNode(nodeIdSelector?: NodeSelector<NodeSelectorType.Id>) {\r\n      if (nodeIdSelector) {\r\n        const targets = getNodesFromSelector(state.nodes, nodeIdSelector, {\r\n          idOnly: true,\r\n          existOnly: true,\r\n        });\r\n\r\n        this.setNodeEvent(\r\n          'selected',\r\n          targets.map(({ node }) => node.id)\r\n        );\r\n      } else {\r\n        this.setNodeEvent('selected', null);\r\n      }\r\n\r\n      this.setNodeEvent('hovered', null);\r\n    },\r\n  };\r\n};\r\n\r\nexport const ActionMethods = (\r\n  state: EditorState,\r\n  query: QueryCallbacksFor<typeof QueryMethods>\r\n) => {\r\n  return {\r\n    ...Methods(state, query),\r\n    // Note: Beware: advanced method! You most likely don't need to use this\r\n    // TODO: fix parameter types and cleanup the method\r\n    setState(\r\n      cb: (\r\n        state: EditorState,\r\n        actions: Delete<CallbacksFor<typeof Methods>, 'history'>\r\n      ) => void\r\n    ) {\r\n      const { history, ...actions } = this;\r\n\r\n      // We pass the other actions as the second parameter, so that devs could still make use of the predefined actions\r\n      cb(state, actions);\r\n    },\r\n  };\r\n};\r\n"]}