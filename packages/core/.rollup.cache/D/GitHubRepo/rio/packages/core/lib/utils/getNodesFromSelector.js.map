{"version":3,"file":"getNodesFromSelector.js","sourceRoot":"","sources":["../../src/utils/getNodesFromSelector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAClD,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAKvC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,KAAY,EACZ,QAAsB,EACtB,MAAwB,EACD,EAAE;IACzB,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IAE9D,MAAM,YAAY,GAAG;QACnB,SAAS,EAAE,KAAK;QAChB,MAAM,EAAE,KAAK;QACb,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC;KAClB,CAAC;IAEF,MAAM,aAAa,GAAG,KAAK;SACxB,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SACxB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACZ,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC7B,OAAO;gBACL,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC;gBACjB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;aACtB,CAAC;QACJ,CAAC;QAED,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YACrD,MAAM,IAAI,GAAG,IAAY,CAAC;YAC1B,OAAO;gBACL,IAAI;gBACJ,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;aACzB,CAAC;QACJ,CAAC;QAED,OAAO;YACL,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,KAAK;SACd,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC;QAC3B,SAAS,CACP,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EACjE,oBAAoB,CACrB,CAAC;IACJ,CAAC;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { ERROR_INVALID_NODEID } from '@rio/utils';\r\nimport invariant from 'tiny-invariant';\r\n\r\nimport { Nodes, Node, NodeSelectorWrapper, NodeSelector } from '../interfaces';\r\n\r\ntype config = { existOnly: boolean; idOnly: boolean };\r\nexport const getNodesFromSelector = (\r\n  nodes: Nodes,\r\n  selector: NodeSelector,\r\n  config?: Partial<config>\r\n): NodeSelectorWrapper[] => {\r\n  const items = Array.isArray(selector) ? selector : [selector];\r\n\r\n  const mergedConfig = {\r\n    existOnly: false,\r\n    idOnly: false,\r\n    ...(config || {}),\r\n  };\r\n\r\n  const nodeSelectors = items\r\n    .filter((item) => !!item)\r\n    .map((item) => {\r\n      if (typeof item === 'string') {\r\n        return {\r\n          node: nodes[item],\r\n          exists: !!nodes[item],\r\n        };\r\n      }\r\n\r\n      if (typeof item === 'object' && !mergedConfig.idOnly) {\r\n        const node = item as Node;\r\n        return {\r\n          node,\r\n          exists: !!nodes[node.id],\r\n        };\r\n      }\r\n\r\n      return {\r\n        node: null,\r\n        exists: false,\r\n      };\r\n    });\r\n\r\n  if (mergedConfig.existOnly) {\r\n    invariant(\r\n      nodeSelectors.filter((selector) => !selector.exists).length === 0,\r\n      ERROR_INVALID_NODEID\r\n    );\r\n  }\r\n\r\n  return nodeSelectors;\r\n};\r\n"]}