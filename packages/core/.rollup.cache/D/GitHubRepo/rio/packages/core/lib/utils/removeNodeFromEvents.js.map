{"version":3,"file":"removeNodeFromEvents.js","sourceRoot":"","sources":["../../src/utils/removeNodeFromEvents.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAAkB,EAAE,MAAc,EAAE,EAAE,CACzE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;IACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnC,IAAI,QAAQ,IAAI,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACrD,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CACzB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,CACnD,CAAC;IACJ,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { EditorState, NodeId } from '../interfaces';\r\n\r\nexport const removeNodeFromEvents = (state: EditorState, nodeId: NodeId) =>\r\n  Object.keys(state.events).forEach((key) => {\r\n    const eventSet = state.events[key];\r\n    if (eventSet && eventSet.has && eventSet.has(nodeId)) {\r\n      state.events[key] = new Set(\r\n        Array.from(eventSet).filter((id) => nodeId !== id)\r\n      );\r\n    }\r\n  });\r\n"]}