{"version":3,"file":"Element.js","sourceRoot":"","sources":["../../src/nodes/Element.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,6BAA6B,EAAE,MAAM,YAAY,CAAC;AAC3D,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAGhE,MAAM,CAAC,MAAM,mBAAmB,GAAG;IACjC,EAAE,EAAE,KAAK;IACT,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,KAAK;CACd,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC,EAAE,EAAE,MAAM;IACV,MAAM,EAAE,UAAU;CACnB,CAAC;AAWF,MAAM,UAAU,OAAO,CAA8B,EACnD,EAAE,EACF,QAAQ,EACR,GAAG,YAAY,EACC;IAChB,MAAM,EAAE,EAAE,EAAE,GAAG;QACb,GAAG,mBAAmB;QACtB,GAAG,YAAY;KAChB,CAAC;IAEF,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,iBAAiB,EAAE,CAAC;IAC/C,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,eAAe,EAAE,CAAC;IAExD,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAgB,GAAG,EAAE;QAClD,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,6BAA6B,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAEtC,IAAI,aAAa,EAAE,CAAC;YAClB,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC5C,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;gBAC7C,CAAC,CAAC,IAAI,CAAC;YAET,qFAAqF;YACrF,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE,CAAC;gBAClD,OAAO,YAAY,CAAC,EAAE,CAAC;YACzB,CAAC;YAED,iDAAiD;YACjD,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CACvC,OAAO,EACP,YAAY,EACZ,QAAQ,CACT,CAAC;YAEF,MAAM,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC;YAEjE,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC,CAAC,CAAC,oBAAC,WAAW,IAAC,EAAE,EAAE,YAAY,GAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AACjE,CAAC","sourcesContent":["import { ERROR_TOP_LEVEL_ELEMENT_NO_ID } from '@rioe/utils';\r\nimport React, { useState } from 'react';\r\nimport invariant from 'tiny-invariant';\r\n\r\nimport { NodeElement } from './NodeElement';\r\nimport { useInternalNode } from './useInternalNode';\r\n\r\nimport { useInternalEditor } from '../editor/useInternalEditor';\r\nimport { NodeId } from '../interfaces';\r\n\r\nexport const defaultElementProps = {\r\n  is: 'div',\r\n  canvas: false,\r\n  custom: {},\r\n  hidden: false,\r\n};\r\n\r\nexport const elementPropToNodeData = {\r\n  is: 'type',\r\n  canvas: 'isCanvas',\r\n};\r\n\r\nexport type ElementProps<T extends React.ElementType> = {\r\n  id?: NodeId;\r\n  is?: T;\r\n  custom?: Record<string, any>;\r\n  children?: React.ReactNode;\r\n  canvas?: boolean;\r\n  hidden?: boolean;\r\n} & React.ComponentProps<T>;\r\n\r\nexport function Element<T extends React.ElementType>({\r\n  id,\r\n  children,\r\n  ...elementProps\r\n}: ElementProps<T>) {\r\n  const { is } = {\r\n    ...defaultElementProps,\r\n    ...elementProps,\r\n  };\r\n\r\n  const { query, actions } = useInternalEditor();\r\n  const { id: nodeId, inNodeContext } = useInternalNode();\r\n\r\n  const [linkedNodeId] = useState<NodeId | null>(() => {\r\n    invariant(!!id, ERROR_TOP_LEVEL_ELEMENT_NO_ID);\r\n    const node = query.node(nodeId).get();\r\n\r\n    if (inNodeContext) {\r\n      const existingNode = node.data.linkedNodes[id]\r\n        ? query.node(node.data.linkedNodes[id]).get()\r\n        : null;\r\n\r\n      // Render existing linked Node if it already exists (and is the same type as the JSX)\r\n      if (existingNode && existingNode.data.type === is) {\r\n        return existingNode.id;\r\n      }\r\n\r\n      // otherwise, create and render a new linked Node\r\n      const linkedElement = React.createElement(\r\n        Element,\r\n        elementProps,\r\n        children\r\n      );\r\n\r\n      const tree = query.parseReactElement(linkedElement).toNodeTree();\r\n\r\n      actions.history.ignore().addLinkedNodeFromTree(tree, nodeId, id);\r\n      return tree.rootNodeId;\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return linkedNodeId ? <NodeElement id={linkedNodeId} /> : null;\r\n}\r\n"]}