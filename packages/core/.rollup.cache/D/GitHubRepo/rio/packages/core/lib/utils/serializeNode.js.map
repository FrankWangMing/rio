{"version":3,"file":"serializeNode.js","sourceRoot":"","sources":["../../src/utils/serializeNode.tsx"],"names":[],"mappings":"AAAA,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAKtD,MAAM,UAAU,GAAG,CAAC,IAAgC,EAAE,QAAkB,EAAE,EAAE;IAC1E,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,EAAE,YAAY,EAAE,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC;AAC5D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,IAAmD,EACnD,QAAkB,EACL,EAAE;IACf,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IACrC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAA2B,EAAE,GAAG,EAAE,EAAE;QACrE,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QAExB,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,CAAC;YACtE,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,GAAG,KAAK,UAAU,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnD,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE;gBACzC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;oBAC9B,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,OAAO,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC;aAAM,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC3C,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QACrB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;QAChC,QAAQ,EAAE,CAAC,CAAC,QAAQ;QACpB,KAAK;KACN,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,IAA6B,EAC7B,QAAkB,EACF,EAAE;IAClB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC;IAE1D,MAAM,WAAW,GAAG,aAAa,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,QAAQ,CAAC,CAAC;IAEvE,OAAO;QACL,GAAG,WAAW;QACd,GAAG,QAAQ;KACZ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { Children } from 'react';\r\n\r\nimport { resolveComponent } from './resolveComponent';\r\n\r\nimport { NodeData, ReducedComp, SerializedNode } from '../interfaces';\r\nimport { Resolver } from '../interfaces';\r\n\r\nconst reduceType = (type: React.ElementType | string, resolver: Resolver) => {\r\n  if (typeof type === 'string') {\r\n    return type;\r\n  }\r\n  return { resolvedName: resolveComponent(resolver, type) };\r\n};\r\n\r\nexport const serializeComp = (\r\n  data: Pick<NodeData, 'type' | 'isCanvas' | 'props'>,\r\n  resolver: Resolver\r\n): ReducedComp => {\r\n  let { type, isCanvas, props } = data;\r\n  props = Object.keys(props).reduce((result: Record<string, any>, key) => {\r\n    const prop = props[key];\r\n\r\n    if (prop === undefined || prop === null || typeof prop === 'function') {\r\n      return result;\r\n    }\r\n\r\n    if (key === 'children' && typeof prop !== 'string') {\r\n      result[key] = Children.map(prop, (child) => {\r\n        if (typeof child === 'string') {\r\n          return child;\r\n        }\r\n        return serializeComp(child, resolver);\r\n      });\r\n    } else if (typeof prop.type === 'function') {\r\n      result[key] = serializeComp(prop, resolver);\r\n    } else {\r\n      result[key] = prop;\r\n    }\r\n    return result;\r\n  }, {});\r\n\r\n  return {\r\n    type: reduceType(type, resolver),\r\n    isCanvas: !!isCanvas,\r\n    props,\r\n  };\r\n};\r\n\r\nexport const serializeNode = (\r\n  data: Omit<NodeData, 'event'>,\r\n  resolver: Resolver\r\n): SerializedNode => {\r\n  const { type, props, isCanvas, name, ...nodeData } = data;\r\n\r\n  const reducedComp = serializeComp({ type, isCanvas, props }, resolver);\r\n\r\n  return {\r\n    ...reducedComp,\r\n    ...nodeData,\r\n  };\r\n};\r\n"]}