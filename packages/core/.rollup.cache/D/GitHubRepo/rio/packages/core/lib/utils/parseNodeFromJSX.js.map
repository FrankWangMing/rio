{"version":3,"file":"parseNodeFromJSX.js","sourceRoot":"","sources":["../../src/utils/parseNodeFromJSX.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAI1C,MAAM,UAAU,gBAAgB,CAC9B,GAAgC,EAChC,SAAyD;IAEzD,IAAI,OAAO,GAAG,GAAyB,CAAC;IAExC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAChC,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,EAAE,OAAO,CAAuB,CAAC;IAC7E,CAAC;IAED,IAAI,UAAU,GAAG,OAAO,CAAC,IAAW,CAAC;IAErC,OAAO,UAAU,CACf;QACE,IAAI,EAAE;YACJ,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE;SAC5B;KACF,EACD,CAAC,IAAI,EAAE,EAAE;QACP,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport { createNode } from './createNode';\r\n\r\nimport { Node } from '../interfaces';\r\n\r\nexport function parseNodeFromJSX(\r\n  jsx: React.ReactElement | string,\r\n  normalize?: (node: Node, jsx: React.ReactElement) => void\r\n) {\r\n  let element = jsx as React.ReactElement;\r\n\r\n  if (typeof element === 'string') {\r\n    element = React.createElement(Fragment, {}, element) as React.ReactElement;\r\n  }\r\n\r\n  let actualType = element.type as any;\r\n\r\n  return createNode(\r\n    {\r\n      data: {\r\n        type: actualType,\r\n        props: { ...element.props },\r\n      },\r\n    },\r\n    (node) => {\r\n      if (normalize) {\r\n        normalize(node, element);\r\n      }\r\n    }\r\n  );\r\n}\r\n"]}