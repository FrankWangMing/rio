{"version":3,"file":"useEditor.js","sourceRoot":"","sources":["../../src/hooks/useEditor.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhC,OAAO,EACL,iBAAiB,GAGlB,MAAM,6BAA6B,CAAC;AASrC,MAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,EAAE;IACnC,MAAM,EACJ,qBAAqB,EACrB,MAAM,EACN,YAAY,EACZ,YAAY,EACZ,KAAK,EACL,GAAG,aAAa,EACjB,GAAG,OAAO,CAAC;IAEZ,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAsCF,MAAM,UAAU,SAAS,CAAI,OAAa;IACxC,MAAM,EACJ,UAAU,EACV,OAAO,EAAE,eAAe,EACxB,KAAK,EACL,KAAK,EACL,GAAG,SAAS,EACb,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAE/B,MAAM,aAAa,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAExD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;QAC3B,OAAO;YACL,GAAG,aAAa;YAChB,OAAO,EAAE;gBACP,GAAG,aAAa,CAAC,OAAO;gBACxB,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAClB,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;gBACzD,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CACpB,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;aAC5D;SACF,CAAC;IACJ,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,OAAO;QACL,UAAU;QACV,OAAO;QACP,KAAK;QACL,KAAK;QACL,GAAI,SAAiB;KACtB,CAAC;AACJ,CAAC","sourcesContent":["import { Overwrite, Delete, OverwriteFnReturnType } from '@rioe/utils';\r\nimport { useMemo } from 'react';\r\n\r\nimport {\r\n  useInternalEditor,\r\n  EditorCollector,\r\n  useInternalEditorReturnType,\r\n} from '../editor/useInternalEditor';\r\n\r\ntype PrivateActions =\r\n  | 'addLinkedNodeFromTree'\r\n  | 'setNodeEvent'\r\n  | 'setDOM'\r\n  | 'replaceNodes'\r\n  | 'reset';\r\n\r\nconst getPublicActions = (actions) => {\r\n  const {\r\n    addLinkedNodeFromTree,\r\n    setDOM,\r\n    setNodeEvent,\r\n    replaceNodes,\r\n    reset,\r\n    ...EditorActions\r\n  } = actions;\r\n\r\n  return EditorActions;\r\n};\r\n\r\nexport type WithoutPrivateActions<S = null> = Delete<\r\n  useInternalEditorReturnType<S>['actions'],\r\n  PrivateActions | 'history'\r\n> & {\r\n  history: Overwrite<\r\n    useInternalEditorReturnType<S>['actions']['history'],\r\n    {\r\n      ignore: OverwriteFnReturnType<\r\n        useInternalEditorReturnType<S>['actions']['history']['ignore'],\r\n        PrivateActions\r\n      >;\r\n      throttle: OverwriteFnReturnType<\r\n        useInternalEditorReturnType<S>['actions']['history']['throttle'],\r\n        PrivateActions\r\n      >;\r\n    }\r\n  >;\r\n};\r\n\r\nexport type useEditorReturnType<S = null> = Overwrite<\r\n  useInternalEditorReturnType<S>,\r\n  {\r\n    actions: WithoutPrivateActions;\r\n    query: Delete<useInternalEditorReturnType<S>['query'], 'deserialize'>;\r\n  }\r\n>;\r\n\r\n/**\r\n * A Hook that that provides methods and information related to the entire editor state.\r\n * @param collector Collector function to consume values from the editor's state\r\n */\r\nexport function useEditor(): useEditorReturnType;\r\nexport function useEditor<S>(\r\n  collect: EditorCollector<S>\r\n): useEditorReturnType<S>;\r\n\r\nexport function useEditor<S>(collect?: any): useEditorReturnType<S> {\r\n  const {\r\n    connectors,\r\n    actions: internalActions,\r\n    query,\r\n    store,\r\n    ...collected\r\n  } = useInternalEditor(collect);\r\n\r\n  const EditorActions = getPublicActions(internalActions);\r\n\r\n  const actions = useMemo(() => {\r\n    return {\r\n      ...EditorActions,\r\n      history: {\r\n        ...EditorActions.history,\r\n        ignore: (...args) =>\r\n          getPublicActions(EditorActions.history.ignore(...args)),\r\n        throttle: (...args) =>\r\n          getPublicActions(EditorActions.history.throttle(...args)),\r\n      },\r\n    };\r\n  }, [EditorActions]);\r\n\r\n  return {\r\n    connectors,\r\n    actions,\r\n    query,\r\n    store,\r\n    ...(collected as any),\r\n  };\r\n}\r\n"]}